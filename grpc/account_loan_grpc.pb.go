// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/account_loan.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceRequestClient is the client API for AccountServiceRequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceRequestClient interface {
	CreateAccounts(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	FindAccounts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FindAccountsResponse, error)
}

type accountServiceRequestClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceRequestClient(cc grpc.ClientConnInterface) AccountServiceRequestClient {
	return &accountServiceRequestClient{cc}
}

func (c *accountServiceRequestClient) CreateAccounts(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/grpc.AccountServiceRequest/CreateAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceRequestClient) FindAccounts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FindAccountsResponse, error) {
	out := new(FindAccountsResponse)
	err := c.cc.Invoke(ctx, "/grpc.AccountServiceRequest/FindAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceRequestServer is the server API for AccountServiceRequest service.
// All implementations must embed UnimplementedAccountServiceRequestServer
// for forward compatibility
type AccountServiceRequestServer interface {
	CreateAccounts(context.Context, *CreateRequest) (*CreateResponse, error)
	FindAccounts(context.Context, *Empty) (*FindAccountsResponse, error)
	mustEmbedUnimplementedAccountServiceRequestServer()
}

// UnimplementedAccountServiceRequestServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceRequestServer struct {
}

func (UnimplementedAccountServiceRequestServer) CreateAccounts(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccounts not implemented")
}
func (UnimplementedAccountServiceRequestServer) FindAccounts(context.Context, *Empty) (*FindAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccounts not implemented")
}
func (UnimplementedAccountServiceRequestServer) mustEmbedUnimplementedAccountServiceRequestServer() {}

// UnsafeAccountServiceRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceRequestServer will
// result in compilation errors.
type UnsafeAccountServiceRequestServer interface {
	mustEmbedUnimplementedAccountServiceRequestServer()
}

func RegisterAccountServiceRequestServer(s grpc.ServiceRegistrar, srv AccountServiceRequestServer) {
	s.RegisterService(&AccountServiceRequest_ServiceDesc, srv)
}

func _AccountServiceRequest_CreateAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceRequestServer).CreateAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AccountServiceRequest/CreateAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceRequestServer).CreateAccounts(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServiceRequest_FindAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceRequestServer).FindAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AccountServiceRequest/FindAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceRequestServer).FindAccounts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountServiceRequest_ServiceDesc is the grpc.ServiceDesc for AccountServiceRequest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountServiceRequest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.AccountServiceRequest",
	HandlerType: (*AccountServiceRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccounts",
			Handler:    _AccountServiceRequest_CreateAccounts_Handler,
		},
		{
			MethodName: "FindAccounts",
			Handler:    _AccountServiceRequest_FindAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account_loan.proto",
}
